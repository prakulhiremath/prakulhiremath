#include <iostream>
using namespace std;

class Sorting {
private:
    int *arr;
    int size;

public:
    Sorting(int n) {
        size = n;
        arr = new int[size];
    }

    // Function to input elements
    void inputElements() {
        cout << "Enter " << size << " elements:" << endl;
        for (int i = 0; i < size; ++i)
       {
            cin >> arr[i];
        }
    }

    // Function to perform Bubble Sort in ascending order
    void bubbleSortAsc() {
        for (int i = 0; i < size - 1; ++i) {
            for (int j = 0; j < size - i - 1; ++j) {
                if (arr[j] > arr[j + 1]) {
                    // Swap if the element found is greater than the next element
                    int temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
            }
        }
    }

    // Function to perform Bubble Sort in descending order
    void bubbleSortDesc() {
        for (int i = 0; i < size - 1; ++i) {
            for (int j = 0; j < size - i - 1; ++j) {
                if (arr[j] < arr[j + 1]) {
                    // Swap if the element found is smaller than the next element
                    int temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
            }
        }
    }

    // Function to display elements
    void display() {
        cout << "Sorted Elements:" << endl;
        for (int i = 0; i < size; ++i) {
            cout << arr[i] << " ";
        }
        cout << endl;
    }

    // Destructor to free the dynamically allocated memory
    ~Sorting() {
        delete[] arr;
    }
};

int main() 
{
    int size;

    cout << "Enter the number of elements: ";
    cin >> size;

    Sorting sortingObject(size);

    sortingObject.inputElements();

    // Sort in ascending order
    sortingObject.bubbleSortAsc();
    cout << "Ascending Order: ";
    sortingObject.display();
	
    // Sort in descending order
    sortingObject.bubbleSortDesc();
    cout << "Descending Order: ";
    sortingObject.display();

    return 0;
}