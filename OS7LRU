#include <stdio.h>
int i, j, nof, nor, flag = 0, ref[50], frm[50], pf = 0, victim = -1;
int recent[50], lrucal[50], count = 0;
int lruvictim();
void main() {
printf("\n\t\t\tLRU PAGE REPLACEMENT ALGORITHM");
// Input number of frames and reference string size
printf("\nEnter no. of frames: ");
scanf("%d", &nof);
printf("Enter no. of reference string entries: ");
scanf("%d", &nor);
// Input reference string
printf("\nEnter reference string: ");
for (i = 0; i < nor; i++)
scanf("%d", &ref[i]);
// Initializing frames and recent use tracking
for (i = 0; i < nof; i++) {
frm[i] = -1; // Initially, all frames are empty
lrucal[i] = -1; // Used for tracking last used time of pages
}
for (i = 0; i < 50; i++) {
recent[i] = -1; // To track the last used time of the pages
}
printf("\nThe given reference string:");
for (i = 0; i < nor; i++) {
printf("%4d", ref[i]);
}
// LRU page replacement algorithm
for (i = 0; i < nor; i++) {
flag = 0;
printf("\n\nReference No. %d ->\t", ref[i]);
// Check if the page is already in one of the frames
for (j = 0; j < nof; j++) {
if (frm[j] == ref[i]) {
flag = 1;
break;
}
}
// If the page is not in any frame, it's a page fault
if (flag == 0) {
count++;
if (count <= nof) {
// Fill the empty frames with the new page
frm[count - 1] = ref[i];
} else {
// If no empty frame is available, replace the least recently used page
victim = lruvictim();
frm[victim] = ref[i];
}
pf++; // Increase page fault count
// Print the current frames after the page fault
for (j = 0; j < nof; j++) {
if (frm[j] == -1) {
printf("--\t");
} else {
printf("%d\t", frm[j]);
}
}
}
// Update the recent usage for the current page
recent[ref[i]] = i;
}
// Output the total page faults
printf("\n\nTotal number of page faults: %d", pf);
}
// Function to find the least recently used page
int lruvictim() {
int i, j, least_recent, lru_index;
least_recent = 9999; // Initialize with a large value
for (i = 0; i < nof; i++) {
if (recent[frm[i]] < least_recent) {
least_recent = recent[frm[i]]; // Find the page with the least recent use
lru_index = i; // Store the index of the LRU page
}
}
return lru_index;
}